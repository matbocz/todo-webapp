{"version":3,"sources":["components/Task.js","components/TaskList.js","components/AddTask.js","components/Navbar.js","components/ToDo.js","App.js","serviceWorker.js","index.js"],"names":["Task","props","task","id","text","important","date","doneDate","active","className","onClick","change","remove","doneTime","Date","toLocaleString","TaskList","tasks","filter","indexOf","search","done","sort","a","b","activeTasks","map","key","doneTasks","length","slice","AddTask","todayDate","toISOString","maxDate","state","handleTextChange","e","setState","target","value","handleDateChange","handleStatusChange","checked","handleTaskAdd","add","alert","type","placeholder","this","onChange","min","max","htmlFor","Component","Navbar","style","textAlign","handleSearch","ToDo","counter","handleRemove","handleAdd","prevState","handleChangeStatus","forEach","getTime","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d92a142c.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Task = (props) => {\r\n  const { id, text, important, date, doneDate, active } = props.task;\r\n\r\n  if (active) {\r\n    return (\r\n      <li\r\n        className={\r\n          important\r\n            ? \"list-group-item d-flex justify-content-between align-items-center text-info\"\r\n            : \"list-group-item d-flex justify-content-between align-items-center\"\r\n        }\r\n      >\r\n        {text} <br />\r\n        {date}\r\n        <span>\r\n          <button\r\n            className=\"btn btn-success mr-1\"\r\n            onClick={() => props.change(id)}\r\n          >\r\n            V\r\n          </button>\r\n          <button\r\n            className=\"btn btn-warning ml-1\"\r\n            onClick={() => props.remove(id)}\r\n          >\r\n            X\r\n          </button>\r\n        </span>\r\n      </li>\r\n    );\r\n  } else {\r\n    const doneTime = new Date(doneDate).toLocaleString();\r\n\r\n    return (\r\n      <li className=\"list-group-item d-flex justify-content-between align-items-center\">\r\n        {text}\r\n        <br />\r\n        {doneTime}\r\n        <button className=\"btn btn-warning\" onClick={() => props.remove(id)}>\r\n          X\r\n        </button>\r\n      </li>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Task;\r\n","import React from \"react\";\r\nimport Task from \"./Task\";\r\n\r\nconst TaskList = (props) => {\r\n  // Get active and completed tasks\r\n  const active = props.tasks\r\n    .filter((task) => task.text.indexOf(props.search) !== -1)\r\n    .filter((task) => task.active);\r\n  const done = props.tasks\r\n    .filter((task) => task.text.indexOf(props.search) !== -1)\r\n    .filter((task) => !task.active);\r\n\r\n  // Sort active and completed tasks\r\n  active.sort((a, b) => b.id - a.id);\r\n  done.sort((a, b) => b.doneDate - a.doneDate);\r\n\r\n  // Create new active and completed task objects\r\n  const activeTasks = active.map((task) => (\r\n    <Task\r\n      key={task.id}\r\n      task={task}\r\n      change={props.change}\r\n      remove={props.remove}\r\n    />\r\n  ));\r\n  const doneTasks = done.map((task) => (\r\n    <Task\r\n      key={task.id}\r\n      task={task}\r\n      change={props.change}\r\n      remove={props.remove}\r\n    />\r\n  ));\r\n\r\n  return (\r\n    <>\r\n      {/* Show all active tasks */}\r\n      <ul className=\"list-group w-100 mt-3\">{activeTasks}</ul>\r\n\r\n      {/* Show the last 5 tasks completed */}\r\n      <h3 className=\"mt-3\">Completed tasks: {done.length}</h3>\r\n      <ul className=\"list-group w-100\">{doneTasks.slice(0, 5)}</ul>\r\n      {done.length > 5 && (\r\n        <p>There are {done.length - 5} more completed tasks</p>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TaskList;\r\n","import React, { Component } from \"react\";\r\n\r\nclass AddTask extends Component {\r\n  todayDate = new Date().toISOString().slice(0, 10);\r\n  maxDate = this.todayDate.slice(0, 4) * 1 + 2;\r\n  maxDate = this.maxDate + \"-12-31\";\r\n\r\n  state = { text: \"\", date: this.todayDate, important: false };\r\n\r\n  handleTextChange = (e) => {\r\n    this.setState({\r\n      text: e.target.value,\r\n    });\r\n  };\r\n\r\n  handleDateChange = (e) => {\r\n    this.setState({\r\n      date: e.target.value,\r\n    });\r\n  };\r\n\r\n  handleStatusChange = (e) => {\r\n    this.setState({\r\n      important: e.target.checked,\r\n    });\r\n  };\r\n\r\n  handleTaskAdd = () => {\r\n    const { text, important, date } = this.state;\r\n\r\n    if (text.length > 2) {\r\n      const add = this.props.add(text, important, date);\r\n      if (add) {\r\n        this.setState({ text: \"\", date: this.todayDate, important: false });\r\n      }\r\n    } else {\r\n      alert(\"You must enter more than two characters\");\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <div className=\"form-row\">\r\n          <div className=\"col-sm-8\">\r\n            <div className=\"form-group\">\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                placeholder=\"Add new task\"\r\n                value={this.state.text}\r\n                onChange={this.handleTextChange}\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"col-sm-4\">\r\n            <div className=\"form-group\">\r\n              <input\r\n                type=\"date\"\r\n                className=\"form-control\"\r\n                value={this.state.date}\r\n                onChange={this.handleDateChange}\r\n                min={this.todayDate}\r\n                max={this.maxDate}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"form-row\">\r\n          <div className=\"col-sm-8\">\r\n            <div className=\"form-check mb-3\">\r\n              <input\r\n                type=\"checkbox\"\r\n                className=\"form-check-input\"\r\n                id=\"importantCheckbox\"\r\n                checked={this.state.important}\r\n                onChange={this.handleStatusChange}\r\n              />\r\n              <label className=\"form-check-label\" htmlFor=\"importantCheckbox\">\r\n                Important\r\n              </label>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"col-sm-4\">\r\n            <button\r\n              className=\"btn btn-primary w-100\"\r\n              onClick={this.handleTaskAdd}\r\n            >\r\n              Add\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddTask;\r\n","import React from \"react\";\r\n\r\nconst Navbar = (props) => (\r\n  <nav className=\"navbar navbar-nav mx-auto navbar-light bg-primary\">\r\n    <form className=\"form-inline my-2\">\r\n      <input\r\n        className=\"form-control\"\r\n        type=\"text\"\r\n        placeholder=\"Search\"\r\n        style={{ textAlign: \"center\" }}\r\n        value={props.search}\r\n        onChange={props.handleSearch}\r\n      />\r\n    </form>\r\n  </nav>\r\n);\r\n\r\nexport default Navbar;\r\n","import React, { Component } from \"react\";\r\n\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"bootswatch/dist/materia/bootstrap.min.css\";\r\n\r\nimport $ from \"jquery\";\r\nimport \"bootstrap/dist/js/bootstrap.bundle.min.js\";\r\n\r\nimport TaskList from \"./TaskList\";\r\nimport AddTask from \"./AddTask\";\r\nimport Navbar from \"./Navbar\";\r\n\r\nclass ToDo extends Component {\r\n  counter = 4;\r\n\r\n  state = {\r\n    search: \"\",\r\n    tasks: [],\r\n  };\r\n\r\n  handleSearch = (e) => {\r\n    this.setState({ search: e.target.value });\r\n  };\r\n\r\n  handleRemove = (id) => {\r\n    let tasks = [...this.state.tasks];\r\n\r\n    tasks = tasks.filter((task) => task.id !== id);\r\n\r\n    this.setState({\r\n      tasks,\r\n    });\r\n  };\r\n\r\n  handleAdd = (text, important, date) => {\r\n    const task = {\r\n      id: this.counter,\r\n      text,\r\n      important,\r\n      date,\r\n      doneDate: null,\r\n      active: true,\r\n    };\r\n    this.counter++;\r\n\r\n    this.setState((prevState) => ({\r\n      tasks: [...prevState.tasks, task],\r\n    }));\r\n\r\n    return true;\r\n  };\r\n\r\n  handleChangeStatus = (id) => {\r\n    const tasks = [...this.state.tasks];\r\n\r\n    tasks.forEach((task) => {\r\n      if (task.id === id) {\r\n        task.active = false;\r\n        task.doneDate = new Date().getTime();\r\n      }\r\n    });\r\n\r\n    this.setState({\r\n      tasks,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <Navbar search={this.state.search} handleSearch={this.handleSearch} />\r\n        <div className=\"container\">\r\n          <AddTask add={this.handleAdd} />\r\n          <TaskList\r\n            tasks={this.state.tasks}\r\n            change={this.handleChangeStatus}\r\n            remove={this.handleRemove}\r\n            search={this.state.search}\r\n          />\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ToDo;\r\n","import React from \"react\";\r\nimport ToDo from \"./components/ToDo\";\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <ToDo />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { \"Service-Worker\": \"script\" },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}